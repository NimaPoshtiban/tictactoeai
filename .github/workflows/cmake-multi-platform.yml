# This starter workflow is for a CMake project running on multiple platforms.
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [ clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
         
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install SBCL on Windows
      if: matrix.os == 'windows-latest'
      run: choco install sbcl

    - name: Install SBCL on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y sbcl

    - name: Verify SBCL installation
      if: matrix.os == 'ubuntu-latest'
      run: sbcl --version

    - name: Configure CMake
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} 
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} 
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} 
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} 
        -S ${{ github.workspace }}

    - name: Build
      env:
        SHELL: /bin/bash
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target ai

    - name: Test on Linux
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ctest --build-config ${{ matrix.build_type }} --tests-regex "ai_test"
    - name: Test on Windows
      if: matrix.os == 'windows-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
    - name: Build Common Lisp fasl file
      if: matrix.os == 'windows-latest'
      run: sbcl --eval '(compile-file "minmax.lisp")' --eval '(quit)'
