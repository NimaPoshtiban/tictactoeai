# This starter workflow is for a CMake project running on multiple platforms.
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [ clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
         
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - name: Install SBCL on Windows
      run: choco install -y sbcl

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}



    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target ai

   
    - name: Test on Windows
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Compile SBCL Script
      run: sbcl --eval '(compile-file "minmax.lisp")' --eval '(quit)'
    

    - name: Package Build Artifacts
      run: |
        # Create directories for packaging
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}/package/bin
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}/package/lib

        # Copy the compiled binaries and libraries
        cp ${{ steps.strings.outputs.build-output-dir }}/*.exe ${{ steps.strings.outputs.build-output-dir }}/package/bin/
        cp ${{ steps.strings.outputs.build-output-dir }}/lib/*.dll ${{ steps.strings.outputs.build-output-dir }}/package/lib/

        # Include additional required files (e.g., config, README)
        cp ${{ github.workspace }}/minmax.fasl ${{ steps.strings.outputs.build-output-dir }}/package/

    - name: Create ZIP Archive
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        powershell Compress-Archive -Path package\* -DestinationPath build_artifacts.zip

    - name: Create GZ Archive
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        tar -czf build_artifacts.tar.gz package

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tttai-${{ matrix.runs-on }}
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/build_artifacts.zip
          ${{ steps.strings.outputs.build-output-dir }}/build_artifacts.tar.gz
