;; Created by Nima Poshtiban
(defpackage :ttt-minmax
  (:use :cl)
  (:export :calculate-answer))

(in-package :ttt-minmax)

(defun generate-matrix (matrix insert-pos)
     "inserts an answer in the given position"
  (let ((m (copy-seq matrix)))
    (setf (aref m insert-pos) 2)
    m))

(defun calculate-score (matrix) 
     "Calculate score using min-max algorithm"
  (let ((min-score 0)
        (max-score 0))
    
    ;; --------- row 1 ------------
    (cond ((= 0 (aref matrix 0))
           (cond ((= 0 (aref matrix 1))
                  (cond ((= 1 (aref matrix 2)) (incf min-score))
                        ((= 2 (aref matrix 2)) (incf max-score))))
                 ((= 1 (aref matrix 1))
                  (if (/= 2 (aref matrix 2)) (incf min-score)))
                 ((= 2 (aref matrix 1))
                  (if (/= 1 (aref matrix 2)) (incf max-score)))))
          ((= 1 (aref matrix 0))
           (if (and (/= 2 (aref matrix 1))
                    (/= 2 (aref matrix 2)))
               (incf min-score)))
          (t (if (and (/= 1 (aref matrix 1))
                      (/= 1 (aref matrix 2)))
                 (incf max-score))))
    
    ;; --------- row 2 ------------
    (cond ((= 0 (aref matrix 3))
           (cond ((= 0 (aref matrix 4))
                  (cond ((= 1 (aref matrix 5)) (incf min-score))
                        ((= 2 (aref matrix 5)) (incf max-score))))
                 ((= 1 (aref matrix 4))
                  (if (/= 2 (aref matrix 5)) (incf min-score)))
                 ((= 2 (aref matrix 4))
                  (if (/= 1 (aref matrix 5)) (incf max-score)))))
          ((= 1 (aref matrix 3))
           (if (and (/= 2 (aref matrix 4))
                    (/= 2 (aref matrix 5)))
               (incf min-score)))
          (t (if (and (/= 1 (aref matrix 4))
                      (/= 1 (aref matrix 5)))
                 (incf max-score))))
    
    ;; --------- row 3 ------------
    (cond ((= 0 (aref matrix 6))
           (cond ((= 0 (aref matrix 7))
                  (cond ((= 1 (aref matrix 8)) (incf min-score))
                        ((= 2 (aref matrix 8)) (incf max-score))))
                 ((= 1 (aref matrix 7))
                  (if (/= 2 (aref matrix 8)) (incf min-score)))
                 ((= 2 (aref matrix 7))
                  (if (/= 1 (aref matrix 8)) (incf max-score)))))
          ((= 1 (aref matrix 6))
           (if (and (/= 2 (aref matrix 7))
                    (/= 2 (aref matrix 8)))
               (incf min-score)))
          (t (if (and (/= 1 (aref matrix 7))
                      (/= 1 (aref matrix 8)))
                 (incf max-score))))
    
    ;; ======================= column 1 =============================
    (cond ((= 0 (aref matrix 0))
           (cond ((= 0 (aref matrix 3))
                  (cond ((= 1 (aref matrix 6)) (incf min-score))
                        ((= 2 (aref matrix 6)) (incf max-score))))
                 ((= 1 (aref matrix 3))
                  (if (/= 2 (aref matrix 6)) (incf min-score)))
                 ((= 2 (aref matrix 3))
                  (if (/= 1 (aref matrix 6)) (incf max-score)))))
          ((= 1 (aref matrix 0))
           (if (and (/= 2 (aref matrix 3))
                    (/= 2 (aref matrix 6)))
               (incf min-score)))
          (t (if (and (/= 1 (aref matrix 3))
                      (/= 1 (aref matrix 6)))
                 (incf max-score))))
    
    ;; ======================= Column 2 =============================
    (cond ((= 0 (aref matrix 1))
           (cond ((= 0 (aref matrix 4))
                  (cond ((= 1 (aref matrix 7)) (incf min-score))
                        ((= 2 (aref matrix 7)) (incf max-score))))
                 ((= 1 (aref matrix 4))
                  (if (/= 2 (aref matrix 7)) (incf min-score)))
                 ((= 2 (aref matrix 4))
                  (if (/= 1 (aref matrix 7)) (incf max-score)))))
          ((= 1 (aref matrix 1))
           (if (and (/= 2 (aref matrix 4))
                    (/= 2 (aref matrix 7)))
               (incf min-score)))
          (t (if (and (/= 1 (aref matrix 4))
                      (/= 1 (aref matrix 7)))
                 (incf max-score))))
    
    ;; ======================= Column 3 =============================
    (cond ((= 0 (aref matrix 2))
           (cond ((= 0 (aref matrix 5))
                  (cond ((= 1 (aref matrix 8)) (incf min-score))
                        ((= 2 (aref matrix 8)) (incf max-score))))
                 ((= 1 (aref matrix 5))
                  (if (/= 2 (aref matrix 8)) (incf min-score)))
                 ((= 2 (aref matrix 5))
                  (if (/= 1 (aref matrix 8)) (incf max-score)))))
          ((= 1 (aref matrix 2))
           (if (and (/= 2 (aref matrix 5))
                    (/= 2 (aref matrix 8)))
               (incf min-score)))
          (t (if (and (/= 1 (aref matrix 5))
                      (/= 1 (aref matrix 8)))
                 (incf max-score))))
    
    ;; ================================== diameter top left to bottom right =================
    (cond ((= 0 (aref matrix 0))
           (cond ((= 0 (aref matrix 4))
                  (cond ((= 1 (aref matrix 8)) (incf min-score))
                        ((= 2 (aref matrix 8)) (incf max-score))))
                 ((= 1 (aref matrix 4))
                  (if (/= 2 (aref matrix 8)) (incf min-score)))
                 ((= 2 (aref matrix 4))
                  (if (/= 1 (aref matrix 8)) (incf max-score)))))
          ((= 1 (aref matrix 0))
           (if (and (/= 2 (aref matrix 4))
                    (/= 2 (aref matrix 8)))
               (incf min-score)))
          (t (if (and (/= 1 (aref matrix 4))
                      (/= 1 (aref matrix 8)))
                 (incf max-score))))
    
    ;; ==================================== diameter top right to left bottom ================
    (cond ((= 0 (aref matrix 2))
           (cond ((= 0 (aref matrix 4))
                  (cond ((= 1 (aref matrix 6)) (incf min-score))
                        ((= 2 (aref matrix 6)) (incf max-score))))
                 ((= 1 (aref matrix 4))
                  (if (/= 2 (aref matrix 6)) (incf min-score)))
                 ((= 2 (aref matrix 4))
                  (if (/= 1 (aref matrix 6)) (incf max-score)))))
          ((= 1 (aref matrix 2))
           (if (and (/= 2 (aref matrix 4))
                    (/= 2 (aref matrix 6)))
               (incf min-score)))
          (t (if (and (/= 1 (aref matrix 4))

                      (/= 1 (aref matrix 6)))
                 (incf max-score))))
    
    (- min-score max-score)))

(defun check-input (matrix)
   "Validate the input matrix"
  (labels ((iterate (&optional (zeros 0)
                                 (ones 0)
                                 (twos 0)
                                 (counter 0)
                                 (empty-blocks (make-array 1 :adjustable t :fill-pointer 0)))
             (if (< counter 9)
                 (progn
                   (when (or (< (aref matrix counter) 0)
                             (> (aref matrix counter) 2))
                     (return-from iterate nil))
                   (when (= (aref matrix counter) 0)
                     (vector-push counter empty-blocks)
                     (incf zeros))
                   (when (= (aref matrix counter) 1)
                     (incf ones))
                   (when (= (aref matrix counter) 2)
                     (incf twos))
                   (iterate zeros ones twos (1+ counter) empty-blocks))
               (if (/= ones (+ 1 twos))
                   nil
                   empty-blocks))))
    (iterate)))

(defun calculate-answer (matrix)
  "Returns the best answer"
  (let ((empty-blocks (check-input matrix)))
    (if empty-blocks
        (let ((current-score 10)
              (prediction (make-array 1 :adjustable t :fill-pointer 0)))
          (labels ((iterate (&optional (i 0))
                     (if (< i (length empty-blocks))
                         (let* ((tmp-matrix (generate-matrix matrix (aref empty-blocks i)))
                                (score (calculate-score tmp-matrix)))
                           (when (< score current-score)
                             (setf current-score score)
                             (setf prediction tmp-matrix))
                           (iterate (1+ i)))
                         prediction)))
            (iterate))
          prediction)
        (error "No empty blocks found"))))

